@page "/products"
@inject HttpClient _httpClient
@inject NavigationManager Navigation
@rendermode InteractiveWebAssembly

@using System.Net;
@using Webshop.Shared.DTOs;
@using MudBlazor;

<!-- Eftersom projektet använder "Interactivity per page" måste en MudPopoverProvider 
läggas till på varje sida som använder pop-up-komponenter för att hantera deras tillstånd korrekt,
annars syns ex. inte MudSelectedItem-->
<MudPopoverProvider />

<PageTitle>Our Products</PageTitle>

@if (_isLoading)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
    <MudText Class="mt-5" Typo="Typo.body1">Loading products ...</MudText>
}
else
{
    @if (_showProducts)
    {
        <MudPaper Class="pa-4">
            <MudText Class="mb-5" Typo="Typo.h4">Product Management</MudText>

            <MudTextField Class="mb-5" @bind-Value="_searchId" Label="Search by product ID" Adornment="Adornment.Start" Icon="@Icons.Material.Filled.Search"></MudTextField>

            <div style="display: flex">
                <MudButton Class="mb-5" Variant="Variant.Filled" Color="Color.Primary" OnClick="() => GetProductById()">Search</MudButton>
                <MudButton Class="mb-5" Variant="Variant.Outlined" Color="Color.Primary" OnClick="() => ClearProductSearch()" style="margin-left: 10px;">Clear</MudButton>
                <MudButton Class="mb-5" Variant="Variant.Filled" Color="Color.Secondary" OnClick="() => PrepareToAddProducts()" style="margin-left: auto;">Add product</MudButton>
            </div>

            @if (!string.IsNullOrEmpty(_errorMessage))
            {
                <MudText Class="mb-5" Typo="Typo.body1" Style="@($"color:{Colors.Red.Accent4};")">@_errorMessage</MudText>
            }
            else if (!string.IsNullOrEmpty(_successMessage))
            {
                <MudText Class="mb-5" Typo="Typo.body1" Style="@($"color:{Colors.Green.Accent4};")">@_successMessage</MudText>
            }

            @if (_products != null && _products.Any())
            {
                <MudTable Items="@_products" Hover="true" Class="mb-5">
                    <ToolBarContent>
                        <MudText Typo="Typo.h6">All products</MudText>
                    </ToolBarContent>
                    <HeaderContent>
                        <MudTh>ID</MudTh>
                        <MudTh>Product Name</MudTh>
                        <MudTh>Description</MudTh>
                        <MudTh>Price</MudTh>
                        <MudTh>Quantity</MudTh>
                        <MudTh>Category</MudTh>
                        <MudTh>Discontinued</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="ID">@context.Id</MudTd>
                        <MudTd DataLabel="Product Name">@context.ProductName</MudTd>
                        <MudTd DataLabel="Description">@context.Description</MudTd>
                        <MudTd DataLabel="Price">@context.Price</MudTd>
                        <MudTd DataLabel="Stock Quantity">@context.StockQuantity</MudTd>
                        <MudTd DataLabel="Category">@context.ProductCategoryName</MudTd>
                        <MudTd DataLabel="Is discontinued">@context.IsDiscontinued</MudTd>
                        <MudTd>
                            <MudButton OnClick="() => PrepareToUpdateProduct(context)" Color="Color.Tertiary">
                                <MudIcon Icon="@Icons.Material.Outlined.Settings" />
                            </MudButton>                          
                        </MudTd>
                        <MudTd>
                            <MudButton OnClick="() => PrepareToDeleteProduct(context.Id)" Color="Color.Tertiary">
                                <MudIcon Icon="@Icons.Material.Outlined.Delete" />
                            </MudButton>
                        </MudTd>
                    </RowTemplate>
                    <PagerContent>
                        <MudTablePager PageSizeOptions="new int[] { 5, 10, 25, 50, 100, int.MaxValue }"
                                       RowsPerPageString="@rowsPerPageString"
                                       InfoFormat="@infoFormat"
                                       AllItemsText="@allItemsText"
                                       HorizontalAlignment="@horizontalAlignment"
                                       HideRowsPerPage="@hideRowsPerPage"
                                       HidePageNumber="@hidePageNumber"
                                       HidePagination="@hidePagination" />
                    </PagerContent>
                </MudTable>               
            }
        </MudPaper>
    }

    @if (_productToUpdate != null)
    {
        <MudPaper Class="pa-4 mt-5">
            <MudText Class="mb-5" Typo="Typo.h5">Edit Product</MudText>

            @if (!string.IsNullOrEmpty(_errorMessage))
            {
                <MudText Class="mb-5" Typo="Typo.body1" Style="@($"color:{Colors.Red.Accent4};")">@_errorMessage</MudText>
            }
            else if (!string.IsNullOrEmpty(_successMessage))
            {
                <MudText Class="mb-5" Typo="Typo.body1" Style="@($"color:{Colors.Green.Accent4};")">@_successMessage</MudText>
            }

            <MudTextField @bind-Value="_productToUpdate.Id" Label="ID" Disabled=true Class="mb-3"></MudTextField>
            <MudTextField @bind-Value="_productToUpdate.ProductNumber" Label="Internal SKU" Disabled=true Class="mb-3"></MudTextField>
            <MudTextField @bind-Value="_productToUpdate.ProductName" Label="Product name" Required="true" Class="mb-3"></MudTextField>
            <MudTextField @bind-Value="_productToUpdate.Description" Label="Description" Required="true" Class="mb-3"></MudTextField>
            <MudTextField @bind-Value="_productToUpdate.Price" Label="Price" Required="true" Class="mb-3"></MudTextField>
            <MudTextField @bind-Value="_productToUpdate.StockQuantity" Label="Stock quantity" Required="true" Class="mb-3"></MudTextField>

            <MudSelect @bind-Value="_productToUpdate.ProductCategoryId" Label="Category" Required="true" Class="mb-3">                
                @foreach (var category in _productCategories)
                {
                    <MudSelectItem Value="@category.Id">@category.CategoryName</MudSelectItem>
                }          
            </MudSelect>

            <MudRadioGroup @bind-Value="_productToUpdate.IsDiscontinued" Required="true" Class="mb-3">
                <MudRadio Value="true" Color="Color.Primary" Dense="true">Discontinued</MudRadio>
                <MudRadio Value="false" Color="Color.Primary" Dense="false">Active</MudRadio>
            </MudRadioGroup>

            <MudButton Class="mb-3" Variant="Variant.Filled" Color="Color.Primary" OnClick="() => UpdateProduct()">Save</MudButton>
            <MudButton Class="mb-3 ml-2" Variant="Variant.Outlined" Color="Color.Secondary" OnClick="CancelUpdateProduct">Cancel</MudButton>
        </MudPaper>
    }

    @if (_showAddProduct)
    {
        <MudPaper Class="pa-4 mt-5">
            <MudText Class="mb-5" Typo="Typo.h5">Add New Product</MudText>

            @if (!string.IsNullOrEmpty(_errorMessage))
            {
                <MudText Class="mb-5" Typo="Typo.body1" Style="@($"color:{Colors.Red.Accent4};")">@_errorMessage</MudText>
            }
            else if (!string.IsNullOrEmpty(_successMessage))
            {
                <MudText Class="mb-5" Typo="Typo.body1" Style="@($"color:{Colors.Green.Accent4};")">@_successMessage</MudText>
            }

            <MudTextField @bind-Value="_productToAdd.ProductNumber" Label="Internal SKU" Required="true" Class="mb-3"></MudTextField>
            <MudTextField @bind-Value="_productToAdd.ProductName" Label="Product Name" Required="true" Class="mb-3"></MudTextField>
            <MudTextField @bind-Value="_productToAdd.Description" Label="Description" Required="true" Class="mb-3"></MudTextField>
            <MudTextField @bind-Value="_productToAdd.Price" Label="Price" Required="true" Class="mb-3"></MudTextField>
            <MudTextField @bind-Value="_productToAdd.StockQuantity" Label="Stock Quantity" Required="true" Class="mb-3"></MudTextField>

            <MudSelect @bind-Value="_productToAdd.ProductCategoryId" Label="Category" Required="true" Class="mb-3">                
                @foreach (var category in _productCategories)
                {
                    <MudSelectItem Value="@category.Id">@category.CategoryName</MudSelectItem>
                }          
            </MudSelect>

            <MudRadioGroup @bind-Value="_productToAdd.IsDiscontinued" Required="true" Class="mb-3">
                <MudRadio Value="true" Color="Color.Primary" Dense="true">Discontinued</MudRadio>
                <MudRadio Value="false" Color="Color.Primary" Dense="false">Active</MudRadio>
            </MudRadioGroup>

            <MudButton Class="mb-3" Variant="Variant.Filled" Color="Color.Primary" OnClick="() => AddProduct()">Add</MudButton>
            <MudButton Class="mb-3 ml-2" Variant="Variant.Outlined" Color="Color.Secondary" OnClick="CancelAddProduct">Cancel</MudButton>
        </MudPaper>
    }

    @if (_showDeleteProduct)
    {
        <MudPaper Class="pa-4 mt-5">
            <MudText Class="mb-5" Typo="Typo.h5">Are you certain you want to remove this product?</MudText>           

            <MudButton Class="mb-3" Variant="Variant.Filled" Color="Color.Primary" OnClick="() => DeleteProduct()">Yes</MudButton>
            <MudButton Class="mb-3 ml-2" Variant="Variant.Outlined" Color="Color.Primary" OnClick="CancelDeleteProduct">No</MudButton>
        </MudPaper>
    }
}

@code {
    private HorizontalAlignment horizontalAlignment = HorizontalAlignment.Right;
    private bool hidePageNumber;
    private bool hidePagination;
    private bool hideRowsPerPage;
    private string rowsPerPageString = "Rows per page:";
    private string infoFormat = "{first_item}-{last_item} of {all_items}";
    private string allItemsText = "All";

    private bool _isLoading = true;
    private bool _showProducts = false;
    private bool _showAddProduct = false;
    private bool _showDeleteProduct = false;

    private string? _searchId;
    private string? _errorMessage;
    private string? _successMessage;

    private List<ProductCategoriesDto> _productCategories = new List<ProductCategoriesDto>();
    private List<ProductDto> _products = new List<ProductDto>();
    private ProductDto _productToAdd = new ProductDto();
    private ProductDto? _productToUpdate;
    private int? _productIdToDelete;


    protected override async Task OnInitializedAsync()
    {
        await LoadCategories();
        await LoadProducts();
    }

    private async Task LoadCategories()
    {
        try
        {
            _productCategories = await _httpClient.GetFromJsonAsync<List<ProductCategoriesDto>>("api/categories");
            Console.WriteLine($"Categories loaded: {_productCategories.Count} categories"); 
        }
        catch (Exception ex)
        {
            _errorMessage = $"An error occurred while fetching categories: {ex.Message}";
        }
    }

    private async Task LoadProducts()
    {
        try
        {
            _products = await _httpClient.GetFromJsonAsync<List<ProductDto>>("api/products");
            _isLoading = false;
            _showProducts = true;
        }
        catch (Exception ex)
        {
            _errorMessage = $"An error occurred while fetching products: {ex.Message}";
        }
    }

    private async Task GetProductById()
    {
        _errorMessage = null;
        _successMessage = null;
        _products.Clear();

        try
        {
            if (string.IsNullOrWhiteSpace(_searchId))
            {
                await LoadProducts();
            }
            else
            {
                var response = await _httpClient.GetAsync($"api/products/{_searchId}");

                if (response.IsSuccessStatusCode)
                {
                    var product = await response.Content.ReadFromJsonAsync<ProductDto>();

                    if (product != null)
                    {
                        _products.Add(product);
                    }
                }
                else if (response.StatusCode == HttpStatusCode.NotFound)
                {
                    _errorMessage = "No product found with given product ID";
                }
            }
        }
        catch (Exception ex)
        {
            _errorMessage = "An error occurred while searching for selected product.";

            Console.Error.WriteLine($"An error occurred: {ex.Message}");
        }
    }

    private async Task ClearProductSearch()
    {
        _searchId = string.Empty;
        _errorMessage = null;
        _successMessage = null;

        await LoadProducts();
    }

    private void PrepareToAddProducts()
    {
        _showProducts = false;
        _showAddProduct = true;
        _errorMessage = null;
        _successMessage = null;

        _productToAdd.ProductCategoryId = 5;
    }

    private async Task AddProduct()
    {
        if (_productToAdd == null)
        {
            _errorMessage = "Please fill in all required fields.";
            return;
        }

        try
        {
            var newProduct = new CreateProductDto()
            {
                ProductNumber = _productToAdd.ProductNumber,
                ProductName = _productToAdd.ProductName,
                Description = _productToAdd.Description,
                Price = _productToAdd.Price,
                StockQuantity = _productToAdd.StockQuantity,
                ProductCategoryId = _productToAdd.ProductCategoryId,
                IsDiscontinued = _productToAdd.IsDiscontinued                
            };

            var response = await _httpClient.PostAsJsonAsync("api/products", newProduct);

            if (response.IsSuccessStatusCode)
            {
                _successMessage = "Product added successfully!";
                _errorMessage = null;
                _productToAdd = new ProductDto();

                _showAddProduct = false;
                _showProducts = true;

                await LoadProducts();
            }
            else
            {
                _errorMessage = "Failed to add product: The Internal SKU must be unique. Please check the SKU and try again.";
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"An error occurred: {ex.Message}";
            _productToAdd = new ProductDto();
        }
    }

    private async Task CancelAddProduct()
    {
        _productToAdd = new ProductDto();
        _errorMessage = "Add new product cancelled.";
        _successMessage = null;

        _showProducts = true;
        _showAddProduct = false;

        await LoadProducts();
    }

    private void PrepareToUpdateProduct(ProductDto product)
    {        
        _productToUpdate = new ProductDto
        {
            Id = product.Id,
            ProductNumber = product.ProductNumber,
            ProductName = product.ProductName,
            Description = product.Description,
            Price = product.Price,
            StockQuantity = product.StockQuantity,
            ProductCategoryId = product.ProductCategoryId,
            ProductCategoryName = product.ProductCategoryName,
            IsDiscontinued = product.IsDiscontinued            
        };

        _showProducts = false;
        _errorMessage = null;
        _successMessage = null;        
    }

    private async Task UpdateProduct()
    {
        if (_productToUpdate == null)
        {
            _errorMessage = "No product to update.";
            return; 
        }

        try
        {
            var productToUpdateDto = new UpdateProductDto
            {
                ProductNumber = _productToUpdate.ProductNumber,
                ProductName =  _productToUpdate.ProductName,
                Description =  _productToUpdate.Description,
                Price =  _productToUpdate.Price,
                StockQuantity = _productToUpdate.StockQuantity,
                ProductCategoryId = _productToUpdate.ProductCategoryId,
                IsDiscontinued = _productToUpdate.IsDiscontinued      
            };

            var response = await _httpClient.PutAsJsonAsync($"api/products/{_productToUpdate.Id}", productToUpdateDto);

            if (response.IsSuccessStatusCode)
            {
                _successMessage = "Product updated successfully.";
                _errorMessage = null;
                _productToUpdate = null;

                await LoadProducts();
            }
            else
            {
                _errorMessage = "Failed to update product.";
            }                

        }
        catch (Exception ex)
        {
            _errorMessage = $"An error occurred: {ex.Message}";
            _productToUpdate = null;
        }
    }

    private async Task CancelUpdateProduct()
    {
        _productToUpdate = null;
        _errorMessage = "Edit product cancelled.";
        _successMessage = null;

        _showProducts = true;

        await LoadProducts();
    }

    private void PrepareToDeleteProduct(int id)
    {
        _showProducts = false;
        _showDeleteProduct = true;
        _productIdToDelete = id;
    }

    private async Task DeleteProduct()
    {
        try
        {
            var response = await _httpClient.DeleteAsync($"api/products/{_productIdToDelete}");

            if (response.IsSuccessStatusCode)
            {
                _successMessage = "Product deleted successfully.";
                _errorMessage = null;
                _productToUpdate = null;

                await LoadProducts();
            }
            else
            {
                _errorMessage = "Failed to delete product.";
                _productIdToDelete = null;
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"An error occurred: {ex.Message}";
        }
    }

    private async Task CancelDeleteProduct()
    {
        _productIdToDelete = null;
        _errorMessage = "Delete product cancelled.";
        _successMessage = null;
        
        _showDeleteProduct = false;
        _showProducts = true;
    }
}

